// Firestore console â†’ Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    // Helper functions for circle membership and queries
    function hasCircleIdFilter() {
      return request.query.filters.size() >= 1 && 
             request.query.filters[0].fieldPath == "circleId";
    }
    
    function getCircleIdFromQuery() {
      return request.query.filters[0].value;
    }
    
    function isCircleMember(circleId) {
      let circlePath = /databases/$(db)/documents/circles/$(circleId);
      return exists(circlePath) && 
             (request.auth.uid in get(circlePath).data.members || 
              get(circlePath).data.creatorId == request.auth.uid);
    }
    
    // Helper function to check if username is unique
    function isUsernameUnique(username) {
      let usersWithUsername = getAfter(/databases/$(db)/documents/users).where("username", "==", username).size();
      return usersWithUsername == 0 || 
             (resource != null && resource.data.username == username);
    }
    
    // User docs
    match /users/{userId} {
      // Allow reading user documents for authenticated users
      allow read: if true; // Allow all reads for username checking
      
      // Allow querying users by username (for availability checks) - even without authentication
      // This is needed for signup flow where the user isn't authenticated yet
      allow list: if true; // Allow all list operations for username checking
      
      // Allow creating user documents with username validation
      // During signup, the userId will match the auth uid, so we allow this operation
      allow create: if request.auth != null && 
                     request.auth.uid == userId &&
                     isUsernameUnique(request.resource.data.username);
      
      // Allow updating user documents with username validation
      allow update: if request.auth != null && 
                     request.auth.uid == userId && 
                     (request.resource.data.username == resource.data.username || 
                      isUsernameUnique(request.resource.data.username));
    }
    
    // Snap docs
    match /snaps/{snapId} {
      // Allow read if the user is the sender or a recipient
      allow read: if request.auth != null && 
                   (resource.data.sender == request.auth.uid || 
                    request.auth.uid in resource.data.recipients);
      
      // Allow creation if the user is the sender
      allow create: if request.auth != null && 
                     request.resource.data.sender == request.auth.uid;
      
      // Allow updates if the user is the sender or a recipient
      allow update: if request.auth != null && 
                     (resource.data.sender == request.auth.uid || 
                      request.auth.uid in resource.data.recipients);
      
      // Allow reading individual snaps by circleId if the user is a member of the circle
      allow get: if request.auth != null && 
                   resource.data.circleId != null &&
                   exists(/databases/$(db)/documents/circles/$(resource.data.circleId)) &&
                   (request.auth.uid in get(/databases/$(db)/documents/circles/$(resource.data.circleId)).data.members ||
                    get(/databases/$(db)/documents/circles/$(resource.data.circleId)).data.creatorId == request.auth.uid);
                    
      // Allow any authenticated user to list snaps
      allow list: if request.auth != null;
    }
    
    // Friendship docs
    match /friendships/{friendshipId} {
      allow read, write: if request.auth != null && 
                          (request.auth.uid == resource.data.userA || 
                           request.auth.uid == resource.data.userB);
      allow create: if request.auth != null && 
                     request.resource.data.userA == request.auth.uid;
    }
    
    // Circle docs
    match /circles/{circleId} {
      // Allow read if user is a member or has a pending invitation
      allow read: if request.auth != null && (
                   (resource != null && resource.data != null && 
                    (request.auth.uid in resource.data.members || 
                     (resource.data.pendingInvites != null && request.auth.uid in resource.data.pendingInvites)))
                   ||
                   // Allow listing all circles (for queries)
                   request.path.size() == 2
                  );
      
      // Allow creation if the creator is the current user
      allow create: if request.auth != null && 
                     request.resource.data.creatorId == request.auth.uid;
      
      // Allow updates if the user is the creator or is accepting/declining an invitation
      allow update: if request.auth != null && (
                     // Creator can update most fields
                     resource.data.creatorId == request.auth.uid ||
                     
                     // Members can only update specific fields related to their membership
                     (request.auth.uid in resource.data.members && 
                      onlyUpdatingMemberFields()) ||
                     
                     // Invited users can accept/decline invitations
                     (resource.data.pendingInvites != null && 
                      request.auth.uid in resource.data.pendingInvites && 
                      onlyAcceptingOrDecliningInvitation())
                   );
      
      // Allow deletion only by the creator
      allow delete: if request.auth != null && 
                     resource.data.creatorId == request.auth.uid;
      
      // Allow listing all circles for authenticated users
      allow list: if request.auth != null;
      
      // Helper function to check if only member-related fields are being updated
      function onlyUpdatingMemberFields() {
        let allowedFields = ['members'];
        let changedFields = request.resource.data.diff(resource.data).affectedKeys();
        return changedFields.hasOnly(allowedFields);
      }
      
      // Helper function to check if only accepting/declining invitation
      function onlyAcceptingOrDecliningInvitation() {
        let allowedFields = ['members', 'pendingInvites'];
        let changedFields = request.resource.data.diff(resource.data).affectedKeys();
        return changedFields.hasOnly(allowedFields) && 
               (request.resource.data.pendingInvites == null || 
                !request.resource.data.pendingInvites.hasAll([request.auth.uid]));
      }
    }
  }
}